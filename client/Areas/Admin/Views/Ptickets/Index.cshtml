@model client.Areas.Admin.Controllers.PTicketsEventsViewModel
@using client.App_Code
@{
    ViewData["Title"] = "Index";
}

<h1>Admin / Ticket sales</h1>

<ul>
    @foreach (var item in Model.AllEvents)
    {
        <li><a asp-action="Index" asp-route-id="@item.EventId">@item.Name</a></li>
    }
</ul>

@if (ViewData["EventName"] != null) 
{
<div class="d-flex justify-content-between align-items-center">
    <h4>@ViewData["EventName"]</h4>
</div>
}

@if ( Convert.ToInt32(ViewData["id"]) > 0)
{
    <div class="d-flex justify-content-between align-items-center">
    <div class="page-size-selector">
        Näytä:
        <select onchange="location = this.value;">
            @{
                var pageSizes = new int[] { 5,10, 25, 50, 100, 500 };
                var currentUrl = $"/Admin/Ptickets/Index/{Model.SelectedEvent.EventId}/0/";
            }
            @foreach (var size in pageSizes)
            {
                <option value="@(currentUrl + size)"
                        selected="@(ViewBag.count == size)">
                    @size
                </option>
            }
        </select>
        riviä per sivu
    </div>
    <a href="#bottom">Yhteenveto</a>
    </div>

<table class="table table-sm">
    <thead>
        <tr>
            <th>Date</th>
            <th>Ticket</th>
            <th>Price</th>
            <th>Firstname</th>
            <th>Lastname</th>
            <th>Valid</th>
            <th>Buyer</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
      
        @foreach (var item in Model.PTicketShow)
        {
      <tr style="@(item.Cancel == true ? "background-color: yellow;" : "")">
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
                <td>
                   @Html.DisplayFor(modelItem => item.Ticket.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price) €
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Firstname)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Lastname)
                </td>

            <td>
                @Html.DisplayFor(modelItem => item.Valid)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.User.Nickname)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.PticketId">Edit</a> |
                <a asp-action="Delete" asp-route-id="@item.PticketId">Delete</a>
            </td>
        </tr>
}
    </tbody>
    </table>
   
    var TotalPages = Math.Ceiling(Model.PTickets.Count / Convert.ToDouble(ViewBag.count));
    
    if ( TotalPages > 1)
    {
        <ul class="pagination">
        @for (int i = 0; i < TotalPages; i++)
        {
                <li class="@(i == ViewBag.page ? "active" : "") page-item"><a class="page-link" href="/Admin/PTickets/Index/@Model.SelectedEvent.EventId/@i/@ViewBag.count">@(i + 1)</a></li>
        }
        </ul>
    }
} else
{
    <div>Valitse tapahtuma</div>
}

@if (Model.PTickets.Count  > 0)
{
    var visitors = new Dictionary<int, VisitorCount>();
    var cancelCount = 0;
    var okCount = 0;
    var vipCount = 0;
    var normalCount = 0;
    var childCount = 0;

    decimal? normalSum = 0;
    decimal? childSum = 0;
    decimal? vipSum = 0;

    decimal? totalSum = 0;
    foreach( var item in Model.PTickets)
    {
        if ( item.Cancel == true )
        {
            cancelCount++;
        }
        
        if (item.Cancel.Value == false)
        {
            totalSum += item.Price.Value;
            okCount++;

                switch (item.Ticket.Type) {
                    case 1:
                        normalSum += item.Price.Value;
                        normalCount++;
                        break;
                    case 2:
                        vipSum += item.Price.Value;
                        vipCount++;
                        break;
                    case 3:
                        childSum += item.Price.Value;
                        childCount++;
                        break;
			        }
    
            for (int i = 0; i < 3; i++)
            {
                var b = Helper.IsNullableBitTrue(item.Ticket.Day, i);
                if (b)
                {
                    if (!visitors.ContainsKey(i))
                        visitors.Add(i, new VisitorCount { Normal = 0, Vip = 0, Child = 0 });
                    switch (item.Ticket.Type) {
                        case 1:
                            visitors[i].Normal++;
                            break;
                        case 2:
                            visitors[i].Vip++;
                            break;
                        case 3:
                            visitors[i].Child++;
                            break;
					}
                }

            }
        }
    }

    <div id="bottom"></div>
    <div class="container mt-4">
        <div class="card mb-4 shadow-sm">
            <div class="card-header bg-primary text-white" style="background-color:#ff3131 !important">
                <h5 class="mb-0">Päivittäinen kävijämäärä</h5>
            </div>
            <div class="card-body p-1">
                <table class="table table-sm mb-0  table-striped">
                        <thead>
                            <tr>
                                <th>Päivä</th>
                                <th>Aikuiset</th>
                                <th>Lapset</th>
                                <th>VIP</th>
                                <th>Yhteensä</th>
                            </tr>
                        </thead>
                        <tbody>

                            @{
                                var baseDate = Model.SelectedEvent.Date.Value;
                            }
                            @foreach (var item in visitors)
                            {
                                var currentDate = @baseDate.AddDays(item.Key);
                                <tr>
                                    <td>@currentDate.ToString("dddd", new System.Globalization.CultureInfo("fi-FI"))</td>
                                    <td><strong>@item.Value.Normal / @(Model.SelectedEvent.MaxVisitors - item.Value.Vip)</strong></td>
                                    <td><strong>@item.Value.Child / @(Model.SelectedEvent.MaxVisitors - item.Value.Vip)</strong></td>
                                    <td><strong>@item.Value.Vip / @Model.SelectedEvent.MaxVisitorsVip</strong></td>
                                    <td><strong>@(item.Value.Vip+item.Value.Normal+item.Value.Child) / @Model.SelectedEvent.MaxVisitors</strong></td>
                                </tr>
                            }
                        </tbody>
                    </table>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card  shadow-sm mb-3 h-100">
                    <div class="card-header bg-info text-white" style="background-color:#ff3131 !important">
                        <h5 class="mb-0">Liput yhteenveto</h5>
                    </div>
                    <div class="card-body p-1">
                        <table class="table table-striped mb-0">
                            <thead>
                                <tr>
                                    <th>Lippu</th>
                                    <th class="text-center">Kpl</th>
                                    <th class="text-end">Tulo</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Peruutetut liput</td>
                                    <td class="text-center">@cancelCount</td>
                                    <td> </td>
                                </tr>
                                <tr class="border-top">
                                    <td>VIP-liput</td>
                                    <td class="text-center">@vipCount</td>
                                    <td class="text-end">@vipSum €</td>
                                </tr>
                                <tr class="border-top">
                                    <td>Aikuisten Liput</td>
                                    <td class="text-center">@normalCount</td>
                                    <td class="text-end">@normalSum €</td>
                                </tr>
                                <tr class="border-top">
                                    <td>Lasten Liput</td>
                                    <td class="text-center">@childCount</td>
                                    <td class="text-end">@childSum €</td>
                                </tr>
                                <tr class="border-top" style="border-top-color:black !important; border-top-width:2px !important;">
                                    <td>Ostetut (ei peruutetut) liput yhteensä</td>
                                    <td class="text-center">@okCount</td>
                                    <td class="text-end">@totalSum €</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-success text-white" style="background-color:#ff3131 !important">
                        <h5 class="mb-0">Tulot</h5>
                    </div>
                    <div class="card-body d-flex flex-column justify-content-center align-items-center text-center">
                        <h3 class="text-success text">@totalSum €</h3>
                        <p class="text-muted mb-0">Lipputulot yhteensä</p>
                    </div>
                </div>
            </div>
        </div>
    </div>


}